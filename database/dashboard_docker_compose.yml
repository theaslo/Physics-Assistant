version: '3.8'

services:
  # Dashboard API Server
  dashboard-api:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    ports:
      - "8001:8001"
    environment:
      # Server Configuration
      DASHBOARD_HOST: "0.0.0.0"
      DASHBOARD_PORT: "8001"
      DASHBOARD_WORKERS: "4"
      DASHBOARD_RELOAD: "false"
      
      # Database Configuration
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_DB: "physics_assistant"
      POSTGRES_USER: "physics_user"
      POSTGRES_PASSWORD: "secure_password"
      
      # Redis Configuration
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      
      # Neo4j Configuration
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "secure_password"
      
      # Cache Configuration
      CACHE_TTL_DEFAULT: "300"
      CACHE_MAX_SIZE: "2000"
      
      # Performance Configuration
      COMPRESSION_ENABLED: "true"
      COMPRESSION_MIN_SIZE: "1000"
      SLOW_REQUEST_THRESHOLD: "2.0"
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_RPH: "2000"
      
      # Security
      SECURITY_HEADERS_ENABLED: "true"
      
      # Logging
      LOG_LEVEL: "INFO"
      REQUEST_LOGGING_ENABLED: "true"
    
    depends_on:
      - postgres
      - redis
      - neo4j
    
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    
    networks:
      - dashboard-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/dashboard/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - dashboard-network
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: physics_assistant
      POSTGRES_USER: physics_user
      POSTGRES_PASSWORD: secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d
    networks:
      - dashboard-network
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U physics_user -d physics_assistant"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Neo4j Knowledge Graph
  neo4j:
    image: neo4j:5-community
    environment:
      NEO4J_AUTH: neo4j/secure_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512m
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*,gds.*"
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-plugins:/plugins
    networks:
      - dashboard-network
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - dashboard-api
    networks:
      - dashboard-network
    restart: unless-stopped
    profiles: ["production"]

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dashboard-network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - dashboard-network
    restart: unless-stopped
    profiles: ["monitoring"]

networks:
  dashboard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  neo4j-plugins:
  redis-data:
  prometheus-data:
  grafana-data: