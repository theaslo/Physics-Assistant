# Physics Assistant Production Nginx Gateway Configuration
# High Performance, Secure, Load Balanced Configuration

user nginx;
worker_processes ${NGINX_WORKER_PROCESSES:-auto};
worker_cpu_affinity auto;
worker_rlimit_nofile 200000;
worker_rlimit_core 500M;

# Process priority and resource limits
worker_priority -5;
worker_shutdown_timeout 30s;
pid /var/run/nginx.pid;

# Enhanced events configuration for high performance
events {
    worker_connections ${NGINX_WORKER_CONNECTIONS:-4096};
    use epoll;
    multi_accept on;
    accept_mutex off;
    worker_aio_requests 32;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Character encoding
    charset utf-8;
    source_charset utf-8;

    # Enhanced logging formats for production monitoring
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'cs=$upstream_cache_status '
                       'host=$host server=$server_name '
                       'ssl_protocol=$ssl_protocol ssl_cipher=$ssl_cipher';

    log_format json escape=json '{"timestamp":"$time_iso8601",'
                               '"remote_addr":"$remote_addr",'
                               '"request":"$request",'
                               '"status":$status,'
                               '"body_bytes_sent":$body_bytes_sent,'
                               '"request_time":$request_time,'
                               '"upstream_response_time":"$upstream_response_time",'
                               '"upstream_connect_time":"$upstream_connect_time",'
                               '"upstream_header_time":"$upstream_header_time",'
                               '"user_agent":"$http_user_agent",'
                               '"referer":"$http_referer",'
                               '"x_forwarded_for":"$http_x_forwarded_for",'
                               '"host":"$host",'
                               '"server_name":"$server_name"}';

    # Conditional logging based on status
    map $status $loggable {
        ~^[23]  0;  # Don't log 2xx and 3xx for performance
        default 1;
    }

    access_log /var/log/nginx/access.log main buffer=64k flush=5s;
    access_log /var/log/nginx/access_json.log json buffer=64k flush=5s if=$loggable;
    error_log /var/log/nginx/error.log warn;

    # Performance and connection settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75s;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Buffer settings for better performance
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:20m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=dashboard:20m rate=50r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        image/svg+xml;

    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Security headers (global)
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Download-Options noopen always;
    add_header X-Permitted-Cross-Domain-Policies none always;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Upstream definitions with health checks and load balancing
    upstream streamlit_backend {
        least_conn;
        server streamlit-ui:8501 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream dashboard_backend {
        least_conn;
        server react-dashboard:5173 max_fails=3 fail_timeout=30s weight=1;
        keepalive 16;
    }

    upstream physics_api_backend {
        least_conn;
        server physics-agents-api:8000 max_fails=3 fail_timeout=30s weight=1;
        keepalive 64;
    }

    upstream database_api_backend {
        least_conn;
        server database-api:8001 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }

    upstream dashboard_api_backend {
        least_conn;
        server dashboard-api:8002 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
    }

    # Monitoring upstream for internal health checks
    upstream monitoring_backend {
        server prometheus:9090 max_fails=2 fail_timeout=30s;
        server grafana:3000 max_fails=2 fail_timeout=30s backup;
    }

    # Proxy settings
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_buffer_size 4k;
    proxy_buffers 16 4k;
    proxy_busy_buffers_size 8k;
    proxy_temp_file_write_size 8k;
    proxy_max_temp_file_size 1024m;

    # Map for real IP
    map $http_x_forwarded_for $real_ip {
        ~^(\d+\.\d+\.\d+\.\d+) $1;
        default $remote_addr;
    }

    # Health check endpoint
    server {
        listen 8080;
        server_name _;
        access_log off;
        
        location /health {
            return 200 "Physics Assistant Gateway - Healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx-status {
            stub_status on;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 10.0.0.0/8;
            deny all;
        }
    }

    # Include server configurations
    include /etc/nginx/conf.d/*.conf;
}