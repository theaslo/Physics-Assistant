# Backup Services for Physics Assistant Platform
version: '3.8'

networks:
  physics-network:
    external: true

volumes:
  # Backup storage volumes
  backup-postgres:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/physics-assistant/backups/postgres
  backup-neo4j:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/physics-assistant/backups/neo4j
  backup-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/physics-assistant/backups/redis
  backup-application:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/physics-assistant/backups/application
  backup-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/physics-assistant/backups/logs

services:
  # PostgreSQL Backup Service
  postgres-backup:
    build:
      context: .
      dockerfile: backup/containers/postgres-backup/Dockerfile
    container_name: physics-postgres-backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: physics_assistant
      POSTGRES_USER: physics_user
      POSTGRES_PASSWORD: ${PHYSICS_DB_PASSWORD}
      BACKUP_SCHEDULE: ${POSTGRES_BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_COMPRESSION: ${BACKUP_COMPRESSION:-true}
      BACKUP_ENCRYPTION: ${BACKUP_ENCRYPTION:-true}
      BACKUP_S3_ENABLED: ${BACKUP_S3_ENABLED:-false}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION}
    volumes:
      - backup-postgres:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - physics-network
    restart: unless-stopped
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Neo4j Backup Service
  neo4j-backup:
    build:
      context: .
      dockerfile: backup/containers/neo4j-backup/Dockerfile
    container_name: physics-neo4j-backup
    environment:
      NEO4J_HOST: neo4j
      NEO4J_PORT: 7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_DATABASE: neo4j
      BACKUP_SCHEDULE: ${NEO4J_BACKUP_SCHEDULE:-0 3 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_COMPRESSION: ${BACKUP_COMPRESSION:-true}
      BACKUP_ENCRYPTION: ${BACKUP_ENCRYPTION:-true}
      BACKUP_S3_ENABLED: ${BACKUP_S3_ENABLED:-false}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION}
    volumes:
      - backup-neo4j:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - physics-network
    restart: unless-stopped
    depends_on:
      - neo4j
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'

  # Redis Backup Service
  redis-backup:
    build:
      context: .
      dockerfile: backup/containers/redis-backup/Dockerfile
    container_name: physics-redis-backup
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: physics_redis_2024
      BACKUP_SCHEDULE: ${REDIS_BACKUP_SCHEDULE:-0 4 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_COMPRESSION: ${BACKUP_COMPRESSION:-true}
      BACKUP_ENCRYPTION: ${BACKUP_ENCRYPTION:-true}
      BACKUP_RDB_ENABLED: ${BACKUP_RDB_ENABLED:-true}
      BACKUP_AOF_ENABLED: ${BACKUP_AOF_ENABLED:-true}
      BACKUP_S3_ENABLED: ${BACKUP_S3_ENABLED:-false}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION}
    volumes:
      - backup-redis:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - physics-network
    restart: unless-stopped
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Application Data Backup Service
  application-backup:
    build:
      context: .
      dockerfile: backup/containers/application-backup/Dockerfile
    container_name: physics-application-backup
    environment:
      BACKUP_SCHEDULE: ${APPLICATION_BACKUP_SCHEDULE:-0 5 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_COMPRESSION: ${BACKUP_COMPRESSION:-true}
      BACKUP_ENCRYPTION: ${BACKUP_ENCRYPTION:-true}
      BACKUP_S3_ENABLED: ${BACKUP_S3_ENABLED:-false}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION}
    volumes:
      - backup-application:/backups
      - backup-logs:/backup-logs
      # Mount application data volumes
      - postgres-data:/source/postgres:ro
      - neo4j-data:/source/neo4j:ro
      - redis-data:/source/redis:ro
      - prometheus-data:/source/prometheus:ro
      - grafana-data:/source/grafana:ro
      - alertmanager-data:/source/alertmanager:ro
      # Mount application directories
      - ./UI/uploads:/source/uploads:ro
      - ./UI/logs:/source/ui-logs:ro
      - ./UI/temp:/source/temp:ro
      - ./analytics/models:/source/models:ro
      - ./analytics/logs:/source/analytics-logs:ro
      - ./analytics/exports:/source/exports:ro
      - ./database/logs:/source/database-logs:ro
      - ./database/backups:/source/database-backups:ro
    networks:
      - physics-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backup Monitoring Service
  backup-monitor:
    build:
      context: .
      dockerfile: backup/containers/backup-monitor/Dockerfile
    container_name: physics-backup-monitor
    environment:
      PROMETHEUS_URL: http://prometheus:9090
      ALERTMANAGER_URL: http://alertmanager:9093
      BACKUP_CHECK_INTERVAL: ${BACKUP_CHECK_INTERVAL:-300}
      BACKUP_MAX_AGE_HOURS: ${BACKUP_MAX_AGE_HOURS:-25}
      BACKUP_MIN_SIZE_MB: ${BACKUP_MIN_SIZE_MB:-1}
      WEBHOOK_URL: ${BACKUP_WEBHOOK_URL}
      EMAIL_ENABLED: ${BACKUP_EMAIL_ENABLED:-false}
      EMAIL_SMTP_HOST: ${EMAIL_SMTP_HOST}
      EMAIL_SMTP_PORT: ${EMAIL_SMTP_PORT:-587}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_TO: ${BACKUP_EMAIL_TO}
    volumes:
      - backup-postgres:/backups/postgres:ro
      - backup-neo4j:/backups/neo4j:ro
      - backup-redis:/backups/redis:ro
      - backup-application:/backups/application:ro
      - backup-logs:/logs
    networks:
      - physics-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - alertmanager
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup Restoration Service
  backup-restore:
    build:
      context: .
      dockerfile: backup/containers/backup-restore/Dockerfile
    container_name: physics-backup-restore
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: physics_assistant
      POSTGRES_USER: physics_user
      POSTGRES_PASSWORD: ${PHYSICS_DB_PASSWORD}
      NEO4J_HOST: neo4j
      NEO4J_PORT: 7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: physics_redis_2024
      RESTORE_VALIDATION_ENABLED: ${RESTORE_VALIDATION_ENABLED:-true}
      RESTORE_TEST_MODE: ${RESTORE_TEST_MODE:-false}
    volumes:
      - backup-postgres:/backups/postgres:ro
      - backup-neo4j:/backups/neo4j:ro
      - backup-redis:/backups/redis:ro
      - backup-application:/backups/application:ro
      - backup-logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - physics-network
    restart: "no"
    profiles:
      - restore
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

# External volumes from the main application
volumes:
  postgres-data:
    external: true
  neo4j-data:
    external: true
  redis-data:
    external: true
  prometheus-data:
    external: true
  grafana-data:
    external: true
  alertmanager-data:
    external: true