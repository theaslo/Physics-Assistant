# Physics Assistant Production Docker Compose Orchestration
# High Availability, Load Balanced, Production-Ready Deployment
version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

x-restart-policy: &restart-policy
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s

x-healthcheck-defaults: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

x-resource-limits: &default-resources
  deploy:
    resources:
      reservations:
        memory: 256M
      limits:
        memory: 512M
        cpus: '0.5'

networks:
  physics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: physics-bridge
      com.docker.network.bridge.enable_ip_masquerade: 'true'
      com.docker.network.driver.mtu: 1500

  database-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/postgres
      o: bind
  neo4j-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/neo4j
      o: bind
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/redis
      o: bind
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/prometheus
      o: bind
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/grafana
      o: bind
  alertmanager-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/alertmanager
      o: bind
  nginx-ssl:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-./data}/ssl
      o: bind
  backup-storage:
    driver: local
    driver_opts:
      type: none
      device: ${BACKUP_PATH:-./backups}
      o: bind

services:
  # =============================================================================
  # DATABASE TIER - High Availability Database Services
  # =============================================================================
  
  postgres-primary:
    build:
      context: .
      dockerfile: docker/database/postgresql/Dockerfile
      args:
        PG_VERSION: 15
        BUILD_MODE: production
    container_name: physics-postgres-primary
    hostname: postgres-primary
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PHYSICS_DB_PASSWORD: ${PHYSICS_DB_PASSWORD}
      MONITOR_DB_PASSWORD: ${MONITOR_DB_PASSWORD}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-secure_repl_2024!}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --encoding=UTF8 --locale=en_US.UTF-8"
      PGUSER: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - backup-storage:/var/lib/postgresql/backups
      - ./database/postgresql/init:/docker-entrypoint-initdb.d:ro
      - ./database/postgresql/conf:/etc/postgresql:ro
    networks:
      - database-network
      - physics-network
    ports:
      - "5432:5432"
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres || exit 1"]
    deploy:
      resources:
        reservations:
          memory: 1G
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-2G}
          cpus: ${POSTGRES_CPU_LIMIT:-'1.0'}
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  neo4j-cluster:
    build:
      context: .
      dockerfile: docker/database/neo4j/Dockerfile
      args:
        NEO4J_VERSION: 5.15
        BUILD_MODE: production
    container_name: physics-neo4j-cluster
    hostname: neo4j-cluster
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_dbms_logs_query_enabled: true
      NEO4J_dbms_logs_query_threshold: 1000ms
    volumes:
      - neo4j-data:/data
      - backup-storage:/var/lib/neo4j/backups
      - ./database/neo4j/logs:/logs
      - ./database/neo4j/conf:/conf:ro
    networks:
      - database-network
      - physics-network
    ports:
      - "7474:7474"
      - "7687:7687"
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p $NEO4J_PASSWORD 'RETURN 1;' || exit 1"]
    deploy:
      resources:
        reservations:
          memory: 2G
        limits:
          memory: ${NEO4J_MEMORY_LIMIT:-3G}
          cpus: ${NEO4J_CPU_LIMIT:-'1.5'}
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  redis-cluster:
    build:
      context: .
      dockerfile: docker/database/redis/Dockerfile
      args:
        REDIS_VERSION: 7.2
        BUILD_MODE: production
    container_name: physics-redis-cluster
    hostname: redis-cluster
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_MAXMEMORY: 512mb
      REDIS_MAXMEMORY_POLICY: allkeys-lru
    volumes:
      - redis-data:/data
      - ./database/redis/conf:/usr/local/etc/redis:ro
    networks:
      - database-network
      - physics-network
    ports:
      - "6379:6379"
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-1G}
          cpus: ${REDIS_CPU_LIMIT:-'0.5'}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # API TIER - Load Balanced Application Services
  # =============================================================================
  
  database-api-1:
    build:
      context: .
      dockerfile: docker/api/database-api/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-database-api-1
    hostname: database-api-1
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_PORT: 5432
      POSTGRES_DB: physics_assistant
      POSTGRES_USER: physics_user
      POSTGRES_PASSWORD: ${PHYSICS_DB_PASSWORD}
      REDIS_HOST: redis-cluster
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      NEO4J_HOST: neo4j-cluster
      NEO4J_PORT: 7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      API_HOST: 0.0.0.0
      API_PORT: 8001
      WORKERS: 4
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./database/logs:/app/logs
      - backup-storage:/app/backups
      - ./database/exports:/app/exports
    networks:
      - physics-network
      - database-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"] 
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
      neo4j-cluster:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  database-api-2:
    build:
      context: .
      dockerfile: docker/api/database-api/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-database-api-2
    hostname: database-api-2
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_PORT: 5432
      POSTGRES_DB: physics_assistant
      POSTGRES_USER: physics_user
      POSTGRES_PASSWORD: ${PHYSICS_DB_PASSWORD}
      REDIS_HOST: redis-cluster
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      NEO4J_HOST: neo4j-cluster
      NEO4J_PORT: 7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      API_HOST: 0.0.0.0
      API_PORT: 8001
      WORKERS: 4
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./database/logs:/app/logs
      - backup-storage:/app/backups
      - ./database/exports:/app/exports
    networks:
      - physics-network
      - database-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
      neo4j-cluster:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  dashboard-api:
    build:
      context: .
      dockerfile: docker/api/dashboard-api/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-dashboard-api
    hostname: dashboard-api
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_PORT: 5432
      POSTGRES_DB: physics_assistant
      POSTGRES_USER: physics_user
      POSTGRES_PASSWORD: ${PHYSICS_DB_PASSWORD}
      REDIS_HOST: redis-cluster
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      NEO4J_HOST: neo4j-cluster
      NEO4J_PORT: 7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      DATABASE_API_HOSTS: database-api-1:8001,database-api-2:8001
      API_HOST: 0.0.0.0
      API_PORT: 8002
      WORKERS: 4
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./database/logs:/app/logs
      - ./database/exports:/app/exports
    networks:
      - physics-network
      - database-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
    depends_on:
      database-api-1:
        condition: service_healthy
      database-api-2:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  physics-agents-api-1:
    build:
      context: .
      dockerfile: docker/api/physics-agents/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-agents-api-1
    hostname: physics-agents-api-1
    environment:
      DATABASE_API_HOSTS: database-api-1:8001,database-api-2:8001
      MCP_SERVICES_CONFIG: |
        {
          "forces": "mcp-forces:10100",
          "kinematics": "mcp-kinematics:10100",
          "math": "mcp-math:10100",
          "energy": "mcp-energy:10100",
          "momentum": "mcp-momentum:10100",
          "angular-motion": "mcp-angular-motion:10100"
        }
      API_HOST: 0.0.0.0
      API_PORT: 8000
      WORKERS: 4
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./UI/logs:/app/logs
      - ./UI/temp:/app/temp
      - ./UI/uploads:/app/uploads
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    depends_on:
      database-api-1:
        condition: service_healthy
      database-api-2:
        condition: service_healthy
      mcp-forces:
        condition: service_healthy
      mcp-kinematics:
        condition: service_healthy
      mcp-math:
        condition: service_healthy
      mcp-energy:
        condition: service_healthy
      mcp-momentum:
        condition: service_healthy
      mcp-angular-motion:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 1G
        limits:
          memory: 2G
          cpus: '1.5'
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 180s
    security_opt:
      - no-new-privileges:true

  physics-agents-api-2:
    build:
      context: .
      dockerfile: docker/api/physics-agents/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-agents-api-2
    hostname: physics-agents-api-2
    environment:
      DATABASE_API_HOSTS: database-api-1:8001,database-api-2:8001
      MCP_SERVICES_CONFIG: |
        {
          "forces": "mcp-forces:10100",
          "kinematics": "mcp-kinematics:10100",
          "math": "mcp-math:10100",
          "energy": "mcp-energy:10100",
          "momentum": "mcp-momentum:10100",
          "angular-motion": "mcp-angular-motion:10100"
        }
      API_HOST: 0.0.0.0
      API_PORT: 8000
      WORKERS: 4
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./UI/logs:/app/logs
      - ./UI/temp:/app/temp
      - ./UI/uploads:/app/uploads
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    depends_on:
      database-api-1:
        condition: service_healthy
      database-api-2:
        condition: service_healthy
      mcp-forces:
        condition: service_healthy
      mcp-kinematics:
        condition: service_healthy
      mcp-math:
        condition: service_healthy
      mcp-energy:
        condition: service_healthy
      mcp-momentum:
        condition: service_healthy
      mcp-angular-motion:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 1G
        limits:
          memory: 2G
          cpus: '1.5'
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 180s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # MCP SERVICES TIER - Physics Calculation Microservices
  # =============================================================================
  
  mcp-forces:
    build:
      context: .
      dockerfile: docker/mcp/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-mcp-forces
    hostname: mcp-forces
    environment:
      MCP_SERVICE: forces
      MCP_PORT: 10100
      MCP_HOST: 0.0.0.0
      MCP_TRANSPORT: streamable_http
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  mcp-kinematics:
    build:
      context: .
      dockerfile: docker/mcp/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-mcp-kinematics
    hostname: mcp-kinematics
    environment:
      MCP_SERVICE: kinematics
      MCP_PORT: 10100
      MCP_HOST: 0.0.0.0
      MCP_TRANSPORT: streamable_http
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  mcp-math:
    build:
      context: .
      dockerfile: docker/mcp/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-mcp-math
    hostname: mcp-math
    environment:
      MCP_SERVICE: math
      MCP_PORT: 10100
      MCP_HOST: 0.0.0.0
      MCP_TRANSPORT: streamable_http
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  mcp-energy:
    build:
      context: .
      dockerfile: docker/mcp/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-mcp-energy
    hostname: mcp-energy
    environment:
      MCP_SERVICE: energy
      MCP_PORT: 10100
      MCP_HOST: 0.0.0.0
      MCP_TRANSPORT: streamable_http
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  mcp-momentum:
    build:
      context: .
      dockerfile: docker/mcp/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-mcp-momentum
    hostname: mcp-momentum
    environment:
      MCP_SERVICE: momentum
      MCP_PORT: 10100
      MCP_HOST: 0.0.0.0
      MCP_TRANSPORT: streamable_http
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  mcp-angular-motion:
    build:
      context: .
      dockerfile: docker/mcp/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-mcp-angular-motion
    hostname: mcp-angular-motion
    environment:
      MCP_SERVICE: angular-motion
      MCP_PORT: 10100
      MCP_HOST: 0.0.0.0
      MCP_TRANSPORT: streamable_http
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:10100/health"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # FRONTEND TIER - Load Balanced Web Services
  # =============================================================================
  
  streamlit-ui-1:
    build:
      context: .
      dockerfile: docker/frontend/streamlit-ui/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-streamlit-ui-1
    hostname: streamlit-ui-1
    environment:
      PHYSICS_API_HOSTS: physics-agents-api-1:8000,physics-agents-api-2:8000
      DATABASE_API_HOSTS: database-api-1:8001,database-api-2:8001
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: false
      STREAMLIT_SERVER_ENABLE_CORS: false
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./UI/logs:/app/logs
      - ./UI/uploads:/app/uploads
      - ./UI/temp:/app/temp
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
    depends_on:
      physics-agents-api-1:
        condition: service_healthy
      physics-agents-api-2:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  streamlit-ui-2:
    build:
      context: .
      dockerfile: docker/frontend/streamlit-ui/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-streamlit-ui-2
    hostname: streamlit-ui-2
    environment:
      PHYSICS_API_HOSTS: physics-agents-api-1:8000,physics-agents-api-2:8000
      DATABASE_API_HOSTS: database-api-1:8001,database-api-2:8001
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: false
      STREAMLIT_SERVER_ENABLE_CORS: false
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./UI/logs:/app/logs
      - ./UI/uploads:/app/uploads
      - ./UI/temp:/app/temp
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
    depends_on:
      physics-agents-api-1:
        condition: service_healthy
      physics-agents-api-2:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  react-dashboard:
    build:
      context: .
      dockerfile: docker/frontend/react-dashboard/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-react-dashboard
    hostname: react-dashboard
    environment:
      REACT_APP_API_URL: https://${DOMAIN_NAME:-localhost}/api/dashboard
      REACT_APP_ENVIRONMENT: production
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost/health"]
    depends_on:
      dashboard-api:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # LOAD BALANCER TIER - Nginx with SSL/TLS and High Availability
  # =============================================================================
  
  nginx-loadbalancer:
    build:
      context: .
      dockerfile: docker/frontend/nginx-gateway/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-nginx-loadbalancer
    hostname: nginx-loadbalancer
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
      SSL_ENABLED: ${SSL_ENABLED:-true}
      CERT_EMAIL: ${CERT_EMAIL:-admin@example.com}
      ACME_CA_SERVER: ${ACME_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
      NGINX_WORKER_CONNECTIONS: ${NGINX_WORKER_CONNECTIONS:-2048}
      STREAMLIT_BACKENDS: streamlit-ui-1:8501,streamlit-ui-2:8501
      DASHBOARD_BACKENDS: react-dashboard:80
      API_BACKENDS: physics-agents-api-1:8000,physics-agents-api-2:8000
      DB_API_BACKENDS: database-api-1:8001,database-api-2:8001
      DASHBOARD_API_BACKEND: dashboard-api:8002
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Admin/status port
    volumes:
      - nginx-ssl:/etc/nginx/ssl
      - ./docker/frontend/nginx-gateway/conf:/etc/nginx/conf.d:ro
      - ./docker/frontend/nginx-gateway/templates:/etc/nginx/templates:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - physics-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8080/nginx_status"]
    depends_on:
      streamlit-ui-1:
        condition: service_healthy
      streamlit-ui-2:
        condition: service_healthy
      react-dashboard:
        condition: service_healthy
      dashboard-api:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 512M
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # ANALYTICS TIER - ML and Background Processing
  # =============================================================================
  
  ml-engine:
    build:
      context: .
      dockerfile: docker/analytics/ml-engine/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-ml-engine
    hostname: ml-engine
    environment:
      DATABASE_API_HOSTS: database-api-1:8001,database-api-2:8001
      REDIS_HOST: redis-cluster
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ML_MODEL_PATH: /app/models
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-cluster:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis-cluster:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./analytics/models:/app/models
      - ./analytics/logs:/app/logs
      - ./analytics/exports:/app/exports
      - backup-storage:/app/backups
    networks:
      - physics-network
      - database-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
    depends_on:
      database-api-1:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 2G
        limits:
          memory: 4G
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 180s
    security_opt:
      - no-new-privileges:true

  task-processor:
    build:
      context: .
      dockerfile: docker/analytics/task-processor/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-task-processor
    hostname: task-processor
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-cluster:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis-cluster:6379/0
      DATABASE_API_HOSTS: database-api-1:8001,database-api-2:8001
      REDIS_HOST: redis-cluster
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      CELERY_WORKER_CONCURRENCY: ${CELERY_WORKER_CONCURRENCY:-4}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - ./analytics/logs:/app/logs
      - ./analytics/temp:/app/temp
      - ./analytics/results:/app/results
      - backup-storage:/app/backups
    networks:
      - physics-network
      - database-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "celery", "-A", "app", "inspect", "ping"]
    depends_on:
      redis-cluster:
        condition: service_healthy
      database-api-1:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 1G
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  flower-monitor:
    build:
      context: .
      dockerfile: docker/analytics/flower-monitor/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-flower-monitor
    hostname: flower-monitor
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-cluster:6379/0
      REDIS_HOST: redis-cluster
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-secure_flower_2024!}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    networks:
      - physics-network
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
    depends_on:
      redis-cluster:
        condition: service_healthy
      task-processor:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # MONITORING TIER - Observability and Alerting Stack
  # =============================================================================
  
  prometheus:
    build:
      context: .
      dockerfile: docker/monitoring/prometheus/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-prometheus
    hostname: prometheus
    environment:
      PROMETHEUS_RETENTION_TIME: 30d
      PROMETHEUS_RETENTION_SIZE: 10GB
      PROMETHEUS_WEB_ENABLE_ADMIN_API: 'true'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/data'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://${DOMAIN_NAME:-localhost}/prometheus'
    volumes:
      - prometheus-data:/prometheus/data
      - ./docker/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    networks:
      - physics-network
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
    deploy:
      resources:
        reservations:
          memory: 512M
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  grafana:
    build:
      context: .
      dockerfile: docker/monitoring/grafana/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-grafana
    hostname: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: http://${DOMAIN_NAME:-localhost}/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: 'true'
      GF_ANALYTICS_REPORTING_ENABLED: 'false'
      GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_COOKIE_SECURE: 'true'
      GF_SECURITY_COOKIE_SAMESITE: 'strict'
      GF_LOG_LEVEL: info
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - physics-network
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    depends_on:
      prometheus:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  alertmanager:
    build:
      context: .
      dockerfile: docker/monitoring/alertmanager/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-alertmanager
    hostname: alertmanager
    environment:
      ALERTMANAGER_WEB_EXTERNAL_URL: http://${DOMAIN_NAME:-localhost}/alertmanager
      SMTP_FROM: ${ALERT_MANAGER_EMAIL:-alerts@physics-assistant.edu}
      SLACK_WEBHOOK_URL: ${ALERT_WEBHOOK_URL}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager/data'
      - '--web.external-url=http://${DOMAIN_NAME:-localhost}/alertmanager'
      - '--cluster.listen-address=0.0.0.0:9094'
    volumes:
      - alertmanager-data:/alertmanager/data
      - ./docker/monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - physics-network
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
    depends_on:
      prometheus:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # SYSTEM MONITORING - Node and Container Metrics
  # =============================================================================
  
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: physics-node-exporter
    hostname: node-exporter
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netdev.device-exclude=^lo$$'
      - '--collector.processes'
      - '--collector.systemd'
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
    deploy:
      resources:
        reservations:
          memory: 64M
        limits:
          memory: 128M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.48.1
    container_name: physics-cadvisor
    hostname: cadvisor
    command:
      - '--port=8080'
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--disable_metrics=sched,tcp,udp,diskIO,disk,network'
      - '--docker_only'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 512M
          cpus: '0.3'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    privileged: true
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # BACKUP AND MAINTENANCE SERVICES
  # =============================================================================
  
  backup-service:
    build:
      context: .
      dockerfile: docker/backup/Dockerfile
      args:
        BUILD_MODE: production
    container_name: physics-backup-service
    hostname: backup-service
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      NEO4J_HOST: neo4j-cluster
      NEO4J_PORT: 7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      REDIS_HOST: redis-cluster
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_ENCRYPTION_PASSWORD: ${BACKUP_ENCRYPTION_PASSWORD}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION: ${S3_REGION:-us-east-1}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: production
    volumes:
      - backup-storage:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - database-network
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "python", "/app/health_check.py"]
    depends_on:
      postgres-primary:
        condition: service_healthy
      neo4j-cluster:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
        window: 300s
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # LOG AGGREGATION SERVICE
  # =============================================================================
  
  loki:
    image: grafana/loki:2.9.0
    container_name: physics-loki
    hostname: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker/monitoring/loki/local-config.yaml:/etc/loki/local-config.yaml:ro
      - ./logs/loki:/loki
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true

  promtail:
    image: grafana/promtail:2.9.0
    container_name: physics-promtail
    hostname: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./docker/monitoring/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - ./logs:/host/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9080/ready"]
    depends_on:
      loki:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    security_opt:
      - no-new-privileges:true